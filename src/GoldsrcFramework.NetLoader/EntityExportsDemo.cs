using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace GoldsrcFramework.NetLoader
{
    /// <summary>
    /// Entity exports demo - C# AOT version of entity_exports_demo.cpp
    /// This file demonstrates entity export functions for Half-Life entities
    /// The actual entity exports would be generated by the build system for your mod
    /// </summary>
    public static unsafe partial class EntityExportsDemo
    {
        // Entity private data allocation function table structure
        private struct PrivateDataAllocFuncs
        {
            // Legacy Half-Life entities - populated dynamically
            // Function pointers will be set during initialization
            public delegate* unmanaged[Cdecl]<IntPtr, void> monster_flyer;
            public delegate* unmanaged[Cdecl]<IntPtr, void> monster_flyer_flock;
            public delegate* unmanaged[Cdecl]<IntPtr, void> monster_alien_grunt;
            public delegate* unmanaged[Cdecl]<IntPtr, void> monster_apache;
            public delegate* unmanaged[Cdecl]<IntPtr, void> monster_barnacle;
            public delegate* unmanaged[Cdecl]<IntPtr, void> monster_barney;
            public delegate* unmanaged[Cdecl]<IntPtr, void> monster_barney_dead;
            public delegate* unmanaged[Cdecl]<IntPtr, void> func_wall;
        }

        private static PrivateDataAllocFuncs s_allocFuncs = new PrivateDataAllocFuncs();

        /// <summary>
        /// Initialize private data allocators
        /// This method sets up function pointers for legacy Half-Life entities
        /// </summary>
        public static void InitializePrivateDataAllocators()
        {
            // Set up the function pointers for legacy Half-Life entities
            s_allocFuncs.monster_flyer = GetPrivateDataAllocatorFunctionPointer("monster_flyer");
            s_allocFuncs.monster_flyer_flock = GetPrivateDataAllocatorFunctionPointer("monster_flyer_flock");
            s_allocFuncs.monster_alien_grunt = GetPrivateDataAllocatorFunctionPointer("monster_alien_grunt");
            s_allocFuncs.monster_apache = GetPrivateDataAllocatorFunctionPointer("monster_apache");
            s_allocFuncs.monster_barnacle = GetPrivateDataAllocatorFunctionPointer("monster_barnacle");
            s_allocFuncs.monster_barney = GetPrivateDataAllocatorFunctionPointer("monster_barney");
            s_allocFuncs.monster_barney_dead = GetPrivateDataAllocatorFunctionPointer("monster_barney_dead");
            s_allocFuncs.func_wall = GetPrivateDataAllocatorFunctionPointer("func_wall");
        }

        /// <summary>
        /// Get a private data allocator function pointer for the specified entity class name
        /// </summary>
        private static delegate* unmanaged[Cdecl]<IntPtr, void> GetPrivateDataAllocatorFunctionPointer(string entityClassName)
        {
            try
            {
                // Get the allocator function pointer from the framework
                IntPtr entityNamePtr = Marshal.StringToHGlobalAnsi(entityClassName);
                try
                {
                    IntPtr allocatorPtr = Loader.GetPrivateDataAllocator(entityNamePtr);
                    if (allocatorPtr != IntPtr.Zero)
                    {
                        // Return the function pointer directly
                        return (delegate* unmanaged[Cdecl]<IntPtr, void>)allocatorPtr;
                    }
                }
                finally
                {
                    Marshal.FreeHGlobal(entityNamePtr);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to get allocator for {entityClassName}: {ex.Message}");
            }

            return null;
        }

        // Entity export functions - these are the actual exported functions that Half-Life will call

        [UnmanagedCallersOnly(EntryPoint = "monster_flyer", CallConvs = new[] { typeof(CallConvCdecl) })]
        public static void monster_flyer(IntPtr pev)
        {
            if (s_allocFuncs.monster_flyer != null)
                s_allocFuncs.monster_flyer(pev);
        }

        [UnmanagedCallersOnly(EntryPoint = "monster_flyer_flock", CallConvs = new[] { typeof(CallConvCdecl) })]
        public static void monster_flyer_flock(IntPtr pev)
        {
            if (s_allocFuncs.monster_flyer_flock != null)
                s_allocFuncs.monster_flyer_flock(pev);
        }

        [UnmanagedCallersOnly(EntryPoint = "monster_alien_grunt", CallConvs = new[] { typeof(CallConvCdecl) })]
        public static void monster_alien_grunt(IntPtr pev)
        {
            if (s_allocFuncs.monster_alien_grunt != null)
                s_allocFuncs.monster_alien_grunt(pev);
        }

        [UnmanagedCallersOnly(EntryPoint = "monster_apache", CallConvs = new[] { typeof(CallConvCdecl) })]
        public static void monster_apache(IntPtr pev)
        {
            if (s_allocFuncs.monster_apache != null)
                s_allocFuncs.monster_apache(pev);
        }

        [UnmanagedCallersOnly(EntryPoint = "monster_barnacle", CallConvs = new[] { typeof(CallConvCdecl) })]
        public static void monster_barnacle(IntPtr pev)
        {
            if (s_allocFuncs.monster_barnacle != null)
                s_allocFuncs.monster_barnacle(pev);
        }

        [UnmanagedCallersOnly(EntryPoint = "monster_barney", CallConvs = new[] { typeof(CallConvCdecl) })]
        public static void monster_barney(IntPtr pev)
        {
            if (s_allocFuncs.monster_barney != null)
                s_allocFuncs.monster_barney(pev);
        }

        [UnmanagedCallersOnly(EntryPoint = "monster_barney_dead", CallConvs = new[] { typeof(CallConvCdecl) })]
        public static void monster_barney_dead(IntPtr pev)
        {
            if (s_allocFuncs.monster_barney_dead != null)
                s_allocFuncs.monster_barney_dead(pev);
        }

        [UnmanagedCallersOnly(EntryPoint = "func_wall", CallConvs = new[] { typeof(CallConvCdecl) })]
        public static void func_wall(IntPtr pev)
        {
            if (s_allocFuncs.func_wall != null)
                s_allocFuncs.func_wall(pev);
        }
    }
}
